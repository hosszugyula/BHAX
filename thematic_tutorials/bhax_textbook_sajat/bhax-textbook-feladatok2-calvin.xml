<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin !</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

<section>
        <title>MNIST</title>
        <para>
            Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel,
            <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link> Háttérként ezt vetítsük le:
            <link xlink:href="https://prezi.com/0u8ncvvoabcr/no-programming-programming/">prezi</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Calvin/mnist1.py"><filename>bhax/thematic_tutorials/bhax_textbook_sajat/Calvin/mnist1.py</filename></link>
        </para>
        <para>
            Ma a Goggle által létrehozott Tensorflow-val fogunk megismerkedni, amit a tanulás fejlesztésének érde-
            kében hoztak létre. Tudni kell, hogy a Tensorflow a Google Brain’s második generációs rendszere. A
            Version 1.0.0 -t 2017, Február 11.-én jelentették be. A Tensorflow képes futtatni többmagos CPU-kon,
            illetve GPU-kon (persze az opcionális GPU-val, például CUDA kártyával). A tensorflow elérhető a 64 bites
            rendszereken (Linux, MacOs, Windows), és a mobil platformokkal is kompatibilis.
        </para>
<programlisting language="c"><![CDATA[
/import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D

from PIL import Image
import numpy as np
import sys

# physical_devices = tf.config.experimental.list_physical_devices('GPU')
# assert len(physical_devices) > 0, "Not enough GPU hardware devices available"
# tf.config.experimental.set_memory_growth(physical_devices[0], True)

input_image = np.array(Image.open(sys.argv[1]).convert('L').resize((28, 28), 0)).reshape(1, 28, 28, 1)

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.2))
model.add(Dense(10,activation=tf.nn.softmax))

tb_log_dir = "./cnn_tb"
file_writer = tf.summary.create_file_writer(tb_log_dir)
file_writer.set_as_default()
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=tb_log_dir, profile_batch=0)

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])

model.fit(x=x_train,y=y_train, epochs=10, callbacks=[tensorboard_callback])

model.evaluate(x_test, y_test)

pred = model.predict(input_image)

print (pred)

print("The number is = " , pred.argmax())
]]></programlisting>
        <para>
            A program futtatását követően: <command> python mnist1.py</command> láthatjuk, hogy a programunk a beolvasott képet felismeri, és output-ra ki is írja hogy milyen számot is látunk a képen.
        </para>
    <mediaobject>
        <imageobject>
            <imagedata fileref="./Calvin/mnist.png" format="PNG"/>
        </imageobject>
    </mediaobject>



    </section>

<section>
        <title>Deep MNIST</title>
        <para>
            Mint az előző, de a mély változattal. Segítő ábra, vesd össze a forráskóddal a
            <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/NEMESPOR/DE/denbatfai2.pdf">https://arato.inf.unideb.hu/batfai.norbert/NEMESPOR/DE/denbatfai2.pdf</link> 8. fóliáját!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Calvin/deep_dream.py"><filename>bhax/thematic_tutorials/bhax_textbook_sajat/Calvin/deep_dream.py</filename></link>
        </para>

        <para>
            Itt olyan képeket készíthetünk a programunkkal, amit akkor látunk, amikor valamilyen pszichoaktív szer
            (kábítószer) hatása alatt látunk, például az LSD.
        </para>

<programlisting language="c"><![CDATA[
'''
#Deep Dreaming in Keras.
Run the script with:
```python
python deep_dream.py path_to_your_base_image.jpg prefix_for_results
```
e.g.:
```python
python deep_dream.py img/mypic.jpg results/dream
```
'''
from __future__ import print_function

from keras.preprocessing.image import load_img, save_img, img_to_array
import numpy as np
import scipy
import argparse
import tensorflow.compat.v1 as tensorflow
tensorflow.disable_v2_behavior()

from keras.applications import inception_v3
from keras import backend as K

parser = argparse.ArgumentParser(description='Deep Dreams with Keras.')
parser.add_argument('base_image_path', metavar='base', type=str,
                    help='Path to the image to transform.')
parser.add_argument('result_prefix', metavar='res_prefix', type=str,
                    help='Prefix for the saved results.')

args = parser.parse_args()
base_image_path = args.base_image_path
result_prefix = args.result_prefix

# These are the names of the layers
# for which we try to maximize activation,
# as well as their weight in the final loss
# we try to maximize.
# You can tweak these setting to obtain new visual effects.
settings = {
    'features': {
        'mixed2': 0.2,
        'mixed3': 0.5,
        'mixed4': 2.,
        'mixed5': 1.5,
    },
}


def preprocess_image(image_path):
    # Util function to open, resize and format pictures
    # into appropriate tensors.
    img = load_img(image_path)
    img = img_to_array(img)
    img = np.expand_dims(img, axis=0)
    img = inception_v3.preprocess_input(img)
    return img


def deprocess_image(x):
    # Util function to convert a tensor into a valid image.
    if K.image_data_format() == 'channels_first':
        x = x.reshape((3, x.shape[2], x.shape[3]))
        x = x.transpose((1, 2, 0))
    else:
        x = x.reshape((x.shape[1], x.shape[2], 3))
    x = x / 2.
    x = x + 0.5
    x = x * 255.
    x = np.clip(x, 0, 255).astype('uint8')
    return x

K.set_learning_phase(0)

# Build the InceptionV3 network with our placeholder.
# The model will be loaded with pre-trained ImageNet weights.
model = inception_v3.InceptionV3(weights='imagenet',
                                 include_top=False)
dream = model.input
print('Model loaded.')

# Get the symbolic outputs of each "key" layer (we gave them unique names).
layer_dict = dict([(layer.name, layer) for layer in model.layers])

# Define the loss.
loss = K.variable(0.)
for layer_name in settings['features']:
    # Add the L2 norm of the features of a layer to the loss.
    if layer_name not in layer_dict:
        raise ValueError('Layer ' + layer_name + ' not found in model.')
    coeff = settings['features'][layer_name]
    x = layer_dict[layer_name].output
    # We avoid border artifacts by only involving non-border pixels in the loss.
    scaling = K.prod(K.cast(K.shape(x), 'float32'))
    if K.image_data_format() == 'channels_first':
        loss = loss + coeff * K.sum(K.square(x[:, :, 2: -2, 2: -2])) / scaling
    else:
        loss = loss + coeff * K.sum(K.square(x[:, 2: -2, 2: -2, :])) / scaling

# Compute the gradients of the dream wrt the loss.
grads = K.gradients(loss, dream)[0]
# Normalize gradients.
grads = grads / K.maximum(K.mean(K.abs(grads)), K.epsilon())

# Set up function to retrieve the value
# of the loss and gradients given an input image.
outputs = [loss, grads]
fetch_loss_and_grads = K.function([dream], outputs)


def eval_loss_and_grads(x):
    outs = fetch_loss_and_grads([x])
    loss_value = outs[0]
    grad_values = outs[1]
    return loss_value, grad_values


def resize_img(img, size):
    img = np.copy(img)
    if K.image_data_format() == 'channels_first':
        factors = (1, 1,
                   float(size[0]) / img.shape[2],
                   float(size[1]) / img.shape[3])
    else:
        factors = (1,
                   float(size[0]) / img.shape[1],
                   float(size[1]) / img.shape[2],
                   1)
    return scipy.ndimage.zoom(img, factors, order=1)


def gradient_ascent(x, iterations, step, max_loss=None):
    for i in range(iterations):
        loss_value, grad_values = eval_loss_and_grads(x)
        if max_loss is not None and loss_value > max_loss:
            break
        print('..Loss value at', i, ':', loss_value)
        x = x + step * grad_values
    return x


"""Process:
- Load the original image.
- Define a number of processing scales (i.e. image shapes),
    from smallest to largest.
- Resize the original image to the smallest scale.
- For every scale, starting with the smallest (i.e. current one):
    - Run gradient ascent
    - Upscale image to the next scale
    - Reinject the detail that was lost at upscaling time
- Stop when we are back to the original size.
To obtain the detail lost during upscaling, we simply
take the original image, shrink it down, upscale it,
and compare the result to the (resized) original image.
"""


# Playing with these hyperparameters will also allow you to achieve new effects
step = 0.01  # Gradient ascent step size
num_octave = 3  # Number of scales at which to run gradient ascent
octave_scale = 1.4  # Size ratio between scales
iterations = 20  # Number of ascent steps per scale
max_loss = 10.

img = preprocess_image(base_image_path)
if K.image_data_format() == 'channels_first':
    original_shape = img.shape[2:]
else:
    original_shape = img.shape[1:3]
successive_shapes = [original_shape]
for i in range(1, num_octave):
    shape = tuple([int(dim / (octave_scale ** i)) for dim in original_shape])
    successive_shapes.append(shape)
successive_shapes = successive_shapes[::-1]
original_img = np.copy(img)
shrunk_original_img = resize_img(img, successive_shapes[0])

for shape in successive_shapes:
    print('Processing image shape', shape)
    img = resize_img(img, shape)
    img = gradient_ascent(img,
                          iterations=iterations,
                          step=step,
                          max_loss=max_loss)
    upscaled_shrunk_original_img = resize_img(shrunk_original_img, shape)
    same_size_original = resize_img(original_img, shape)
    lost_detail = same_size_original - upscaled_shrunk_original_img

    img = img + lost_detail
    shrunk_original_img = resize_img(original_img, shape)

save_img(result_prefix + '.png', deprocess_image(np.copy(img)))

]]></programlisting>
    <mediaobject>
        <imageobject>
            <imagedata fileref="./Calvin/sera.png" format="PNG"/>
        </imageobject>
    </mediaobject>
    </section>

<section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
            Telepítsük fel, próbáljuk ki!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/examples/blob/master/lite/examples/object_detection/android/README.md">https://github.com/tensorflow/examples/blob/master/lite/examples/object_detection/android/README.md</link>
        </para>
        <para>
            Ez a kamera applikáció a Google TensorFlow Machines tanulókönyvtárát használja, hogy objektumokat ismerhessen meg a mobilunk kameráján keresztül valós időben.
            Ahhoz, hogy élő nézetet kaphassunk indítsuk el a programot a telefonunkon és máris detektálhatjuk a dolgokat.
        </para>

    <mediaobject>
        <imageobject>
            <imagedata fileref="./Calvin/tf1.jpg" format="JPG"/>
        </imageobject>
    </mediaobject>    

    <mediaobject>
        <imageobject>
            <imagedata fileref="./Calvin/tf2.jpg" format="JPG"/>
        </imageobject>
    </mediaobject>
    
    <mediaobject>
        <imageobject>
            <imagedata fileref="./Calvin/tf3.jpg" format="JPG"/>
        </imageobject>
    </mediaobject>

    </section>

<section>
        <title>Minecraft MALMO-s példa</title>
        <para>
            A <link xlink:href="https://github.com/Microsoft/malmo">Minecraft malmo</link> felhasználásával egy ágens példa, lásd pl.:
            <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>, <link xlink:href="https://bhaxor.blog.hu/2018/11/29/eddig_csaltunk_de_innentol_mi">bhaxor</link>,
            <link xlink:href="https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege">bhaxor_steve_szemuvege</link>
        </para>
        <para>
            Ezt a feladatot késznek tekintem, hiszen tavaly rengeteget foglalkoztunk a Malmo projekttel, versenyeken indultunk, ágenseket fejlesztettünk. Ezek megtalálhatóak a könyvem első fejezetében is, pl.: <link xlink:href="Conway/Red_flower_mining5.py">Conway/Red_flower_mining5.py</link>, és videón is: <link xlink:href="https://www.youtube.com/watch?v=UbiBkkLx1Fk">https://www.youtube.com/watch?v=UbiBkkLx1Fk</link>.
        </para>
    </section>

</chapter>

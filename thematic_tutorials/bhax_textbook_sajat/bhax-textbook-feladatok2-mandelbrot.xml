<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Reverse engineering UML osztálydiagram</title>
        <para>
        UML osztálydiagram rajzolása az első védési C++ programhoz. Az osztálydiagramot a forrásokból
        generáljuk (pl. Argo UML, Umbrello, Eclipse UML) Mutassunk rá a kompozíció és aggregáció
        kapcsolatára a forráskódban és a diagramon, lásd még: <link xlink:href="https://youtu.be/Td_nlERlEOs">https://youtu.be/Td_nlERlEOs</link>
        </para>
        <para>
            Forrás: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tamop425/0027_RSZ4/ch01s02.html">https://www.tankonyvtar.hu/hu/tartalom/tamop425/0027_RSZ4/ch01s02.html</link>
        </para>

        <blockquote><attribution>Wikipedia</attribution>
        <para>
        Az UML (Unified Modeling Language) szabványos, általános célú modellező nyelv, üzleti elemzők, rendszertervezők, szoftvermérnökök számára. Grady Booch, Ivar Jacobson és James Rumbaugh egyesített munkájának terméke. Az objektum orientált (OO) modellezés módszerét alkalmazni lehet a való világ bonyolultságának leírására. Az UML egy gyakorlati, objektum orientált modellező megoldás, nagy méretű programrendszerek modelljeinek vizuális dokumentálására alkalmas eszköz. Az UML módszer és leíró nyelv segítségével különböző nézőpontú szöveges és grafikus modellek készíthetőek
        </para>
        </blockquote>

        <para>
        Az általam választott program a Visual Paradigm volt. A Tools-ban a Code-ra kattintva elérhetjük az Instant Reverse funkciót, mely lehetővé teszi a C++ forráskódok azonnali átalakítását UML osztálydiagrammá.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2/lzwreverse1.png" format="PNG" />
            </imageobject>
        </mediaobject>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2/lzwreverse2.png" format="PNG" />
            </imageobject>
        </mediaobject>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2/lzwreverse.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>
    
        <section>
        <title>Forward engineering UML osztálydiagram</title>
        <para>
        UML-ben tervezzünk osztályokat és generáljunk belőle forrást!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Mandelbrot2/umltocode"><filename>bhax/thematic_tutorials/bhax_textbook_sajat/mandelbrot2/umltocode</filename></link> 
        </para>

        <para>
        A Visual Paradigm segítségével az előző feladatban C++ kódból UML osztálydiagram készült. Ez azonban fordítva is elvégezhető, tehát a diagram alapján új, egyedi C++ kódot kapunk. 
        </para>
 
        <para>
        A forward engineeringhez ismét a Tools-ban kell keresgélnünk. A Code-ra kattintva megkapjuk az Instant Generator funkciót, amely az általunk megadott mappába generálja a diagram alapján a kódot.
        </para>

        <para>
        A header fájlok meglepően pontosra sikeredtek, szinte ugyanazt a kódot kaptuk a diagramból, mint amit korábban megírtunk C++-ban.
        Az UML forward engineering nagy hátránya viszont, hogy a függvények törzse üresen marad, hiszen a Visual Paradigm kizárólag a diagram alapján dolgozta ki a kódot.
        </para>

<programlisting language="C++"><![CDATA[
#include <exception>
using namespace std;

#ifndef __BinRandTree_h__
#define __BinRandTree_h__

// #include "Node.h"
#include "Unirand.h"

class Node;
class Unirand;
template <typename ValueType> class BinRandTree;

template <typename ValueType> class BinRandTree
{
    protected: Node* _root;
    protected: Node* _treep;
    protected: int _depth;
    public: Unirand _ur;
    public: double _mean;
    public: int _msum;
    public: int _mcount;
    public: double _var;
    public: double _vsum;
    public: int _vcount;
    public: Node* _unnamed_Node_;

    public: BinRandTree(Node* aRoot = nullptr, Node* aTreep = nullptr);

    public: BinRandTree(const BinRandTree& aOld);

    public: Node* cp(Node* aNode, Node* aTreep);

    public: BinRandTree& _(const BinRandTree& aOld);

    public: BinRandTree(BinRandTree&& aOld);

    public: BinRandTree& _(BinRandTree&& aOld);

    public: void _BinRandTree();

    public: BinRandTree& _<(ValueType aValue);

    public: void print();

    public: void printr();

    public: void print(Node* aNode, std::ostream& aOs);

    public: void print(const Node& aCnode, std::ostream& aOs);

    public: void deltree(Node* aNode);

    public: int whereToPut();

    public: void eval();

    public: double getMean();

    public: void rmean();

    public: void rmean(Node* aUnnamed_1);

    public: double getVar();

    public: void rvar();

    public: void rvar(Node* aUnnamed_1);

]]></programlisting>
    </section>
        
        <section>
        <title>BPMN</title>
        <para>
        Rajzoljunk le egy tevékenységet BPMN-ben! <link xlink:href="https://arato.inf.unideb.hu/batfai.norbert/PROG2/Prog2_7.pdf">https://arato.inf.unideb.hu/batfai.norbert/PROG2/Prog2_7.pdf</link> (34-47 fólia)
        </para>
        <para>
        Megoldás forrása: <link xlink:href="Mandelbrot2/"><filename>bhax/thematic_tutorials/bhax_textbook_sajat/mandelbrot2/</filename></link> 
        </para>

        <para>
        A BPMN (Business Process Model and Notification) egy egységes folyamatábra alapú jelölés üzleti folyamatok modellezéséhez.
        Célja az egységes grafikus jelölés az üzleti folyamat ábrázolásához.
        Nem terjed ki stratégiák, üzleti szabályzatok modellezésére.
        Ilyen folyamatábrát tudunk a Visual Paradigm segítségével is készíteni, én is ezt használtam, ugyanis a reverse és forward engineering feladatok esetében jól bevált.
        </para>

        <para>
        Az ábrámon két sáv látható: az egyik az ügyfél helyzetét mutatja, a másik pedig a hatóságét, aki várja az adatváltozás bejelentését.
        Ha érkezik egy új bejelentés, egy hatósági személy személy először megvizsgálja a bejelentést, majd eldönti hogy alkalmas e változtatásra.
        A két lehetséges végkifejlet közül a pozitívabb az, ha minden rendben van, az adatváltozás megtörténik, közlik a döntést, majd az ügyfél ezután megismeri a hatóság által hozott döntést.
        Ellenkező esetben viszont elutasítják, ekkor a hatóság hiányok pótlására kéri meg az ügyfélt. Ha ez megfelelő akkor elfogadják és közlik a döntést, valamit az ügyfél megismeri a döntést.
        Ha ez nem megfelelő, akkor közlik a döntést az ügyféllel, majd az ügyfél megismeri ezt a döntést.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2/bpmn.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>
    
    <section>
        <title>EPAM: Neptun tantárgyfelvétel modellezése UML-ben</title>
        <para>
        Modellezd le a Neptun rendszer tárgyfelvételéhez szükséges objektumokat UML diagramm
        segítségével.
        </para>
        <para>
        Megoldás forrása: <link xlink:href="https://github.com/epam-deik-cooperation/epam-deik-prog2/tree/master/week-3/uml-modelling"></link> 
        </para>

        <blockquote><attribution>Wikipedia</attribution>
        <para>
        Az UML (Unified Modeling Language) szabványos, általános célú modellező nyelv, üzleti elemzők, rendszertervezők, szoftvermérnökök számára. Grady Booch, Ivar Jacobson és James Rumbaugh egyesített munkájának terméke. Az objektum orientált (OO) modellezés módszerét alkalmazni lehet a való világ bonyolultságának leírására. Az UML egy gyakorlati, objektum orientált modellező megoldás, nagy méretű programrendszerek modelljeinek vizuális dokumentálására alkalmas eszköz. Az UML módszer és leíró nyelv segítségével különböző nézőpontú szöveges és grafikus modellek készíthetőek
        </para>
        </blockquote>


        <para>
        Ugyebár van három fő class-unk. A lecturer, a student, és a subject. A subject-nek vannak gyerekei: a curriculum, és a noncuriculum.
        </para>

        <para>
        A következő feladatban pedig java nyelven implementáljuk a alábbi diagrammot.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2//neptunuml.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>

    <section>
        <title>EPAM: Neptun tantárgyfelvétel UML diagram implementálása</title>
        <para>
        Implementáld le az előző feladatban létrehozott diagrammot egy tetszőleges nyelven.
        </para>
        <para>
        Megoldás forrása: <link xlink:href="https://github.com/epam-deik-cooperation/epam-deik-prog2/tree/master/week-3/uml-modelling"></link> 
        </para> 
        <para>
        Ugyebár van három fő class-unk. A lecturer, a student, és a subject. A subject-nek vannak gyerekei: a curriculum, és a noncuriculum.
        </para>

<programlisting language="java"><![CDATA[
package neptun.subject;

import neptun.lecturer.Lecturer;
import neptun.student.Student;
import java.util.Set;

public class Subject {

    private String code;
    private String name;
    private SubjectType subjectType;
    private Set<Student> students;
    private Set<Lecturer> lecturers;

    public String getCode() {
        return code;
    }

    public String getName() {
        return name;
    }

    public SubjectType getSubjectType() {
        return subjectType;
    }

    public Set<Student> getStudents() {
        return students;
    }

    public Set<Lecturer> getLecturers() {
        return lecturers;
    }

    public void addNewStudent(Student student) {
        this.students.add(student);
    }

    public void addNewLecturer(Lecturer lecturer) {
        this.lecturers.add(lecturer);
    }

}

]]></programlisting>
    <para>
        Láthatjuk, hogy a subject class-unk kap egy code-ot, egy nevet, a subjectype speciális osztályból(enum: amely egy olyan speciális class amely a contansok egy csoportját reprezentálja). Megkapja a student-ünkből a student-et, a lecturer-ből a lecturers-t, valami hozzáad új student-eket, és új lecturer-eket.
    </para>

<programlisting language="java"><![CDATA[package neptun.student;

import neptun.subject.Subject;
import java.util.Set;

public class Student {

    private String name;
    private Set<Subject> subjects;

    public String getName() {
        return name;
    }

    public Set<Subject> getSubjects() {
        return subjects;
    }

    public void addSubject(Subject subject) {
        this.subjects.add(subject);
    }

    public void removeSubject(Subject subject) {
        this.subjects.remove(subject);
    }

}


]]></programlisting>
    <para>
        Láthatjuk, hogy a student class-unk kap egy egy nevet, valamint a subject classból átveszi a subject-eket. Továbbá a student hozzá tud adni subject-et, valamint azt el is tudja távolítani.
    </para>

<programlisting language="java"><![CDATA[
package neptun.lecturer;

public class Lecturer {

    private String name;

    public String getName() {
        return name;
    }

}

]]></programlisting>
    <para>
        A lecturer class-t nem részletezném, mert az triviális.
    </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./Mandelbrot2//neptunuml.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>

</chapter>
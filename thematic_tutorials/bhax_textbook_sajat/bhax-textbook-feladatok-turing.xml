<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/infinity-for.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/infinity-for.c</filename>
            </link>, 
            <link xlink:href="Turing/infinity-while.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/infinity-while.c</filename>
            </link>.
        </para>
        <para>
            Számos módon hozhatunk és hozunk létre végtelen ciklusokat. 
            Vannak esetek, amikor ez a célunk, például egy szerverfolyamat fusson folyamatosan és van amikor egy
            bug, mert ott lesz végtelen ciklus, ahol nem akartunk. Saját péláinkban ilyen amikor a PageRank algoritmus
            rázza az 1 liter vizet az internetben, de az iteráció csak nem akar konvergálni...
        </para>                    
        <para>
            Egy mag 100 százalékban:               
        </para>
        <programlisting language="c"><![CDATA[int
main ()
{
  for (;;);

  return 0;
}
]]>
        </programlisting>        
        <para>        
        vagy az olvashatóbb, de a programozók és fordítók (szabványok) között kevésbé hordozható
        </para>
        <programlisting language="c"><![CDATA[int
#include <stdbool.h>
main ()
{
  while(true);

  return 0;
}
]]>
        </programlisting>        
        <para>
            Azért érdemes a <literal>for(;;)</literal> hagyományos formát használni, 
            mert ez minden C szabvánnyal lefordul, másrészt
            a többi programozó azonnal látja, hogy az a végtelen ciklus szándékunk szerint végtelen és nem szoftverhiba. 
            Mert ugye, ha a <literal>while</literal>-al trükközünk egy nem triviális 
            <literal>1</literal> vagy <literal>true</literal> feltétellel, akkor ott egy másik, a forrást
            olvasó programozó nem látja azonnal a szándékunkat.
        </para>            
        <para>
            Egyébként a fordító a <literal>for</literal>-os és 
            <literal>while</literal>-os ciklusból ugyanazt az assembly kódot fordítja:
        </para>            
        <screen><![CDATA[$ gcc -S -o infinity-for.S infinity-for.c 
$ gcc -S -o infinity-while.S infinity-while.c 
$ diff infinity-while.S infinity-for.S 
1c1
< 	.file	"infinity-while.c"
---
> 	.file	"infinity-for.c"
]]></screen>  
        <para>
            Egy mag 0 százalékban:               
        </para>        
        <programlisting language="c"><![CDATA[#include <unistd.h>
int
main ()
{
  for (;;)
    sleep(1);
    
  return 0;
}
]]>
        </programlisting>        
        <para>
            Minden mag 100 százalékban:               
        </para>

        <programlisting language="c"><![CDATA[#include <omp.h>

int main()
{	

#pragma omp parallel
{
	for(;;);
}
	return 0;
}
]]>
        </programlisting>        
        <para>
            A <command>gcc infinity_all_core.c -o infinity_all_core -fopenmp</command> parancssorral készítve a futtathatót, majd futtatva,               
            közben egy másik terminálban a <command>top</command> parancsot kiadva tanulmányozzuk, mennyi CPU-t használunk:            
        </para>
        <screen><![CDATA[top - 18:55:20 up  1:06,  1 user,  load average: 1,90, 0,96, 0,75
Tasks: 229 total,   2 running, 172 sleeping,   0 stopped,   0 zombie
%Cpu0  : 98,7 us,  1,3 sy,  0,0 ni,  0,0 id,  0,0 wa,  0,0 hi,  0,0 si,  0,0 st
%Cpu1  : 99,3 us,  0,7 sy,  0,0 ni,  0,0 id,  0,0 wa,  0,0 hi,  0,0 si,  0,0 st
%Cpu2  : 99,7 us,  0,3 sy,  0,0 ni,  0,0 id,  0,0 wa,  0,0 hi,  0,0 si,  0,0 st
%Cpu3  : 98,0 us,  2,0 sy,  0,0 ni,  0,0 id,  0,0 wa,  0,0 hi,  0,0 si,  0,0 st
KiB Mem :  7118404 total,  4456364 free,  1158216 used,  1503824 buff/cache
KiB Swap:  1219788 total,  1219788 free,        0 used.  5664008 avail Mem 

PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND     
4873 hosszu    20       35572    936    840 R 348,5  0,0   1:51.62 infinity        
]]></screen>  
                                
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/lvmi6tyz-nI">https://youtu.be/lvmi6tyz-nI</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:
            <link xlink:href="Turing/infinity-while.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/T100.c</filename>
            </link>.            
        </para>
        <programlisting language="c"><![CDATA[Program T100
#include <stdbool.h>

bool lefagy (program)
{
	if()
		return true;
	else
		return false;
}

main(Q)
{
	Lefagy(Q)
}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
 Ez a feladat a megállási probléma bemutatására szolgál. A megállási probléma abból áll, hogy el lehet-e dönteni egy porgramról adott bemenet esetén, hogy végtelen ciklusba kerül-e. Alan Turing 1936-ban bizonyította be, hogy nem lehetséges olyan általános algoritmust írni, amely minden program-bemenet párról megmondja, hogy végtelen ciklusba kerül-e.        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/valcser.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/valcser.c</filename>
            </link>  
        </para>
        <programlisting language="c"><![CDATA[Változó csere
#include<stdio.h>  
#include<stdlib.h>  
int main()    
{    
int a=30, b=45;      
	printf("Csere elott a szamok: a=%d b=%d",a,b); 

	a=a*b;   //a=1350 (30*45)    
	b=a/b;   //b=30 (1350/45)    
	a=a/b;   //a=45 (1350/30)    
  
	printf("\nCsere utan a szamok: a=%d b=%d",a,b); 
	      
return 0;  
}   

}]]></programlisting> 
        <para>
            A két szám kezdetben a = 30, b = 45 volt. Az "a"-t egyenlővé téve a * b-vel(30 * 45-el) 1350-et kapunk. A "b"-t egyenlővé téve a / b-vel (1350 / 45-el) 30-at kapunk ami a kezdeti "a"-nak volt az értéke, tehát az első cserét végre is hajtottuk. Ezután "a"-t egyenlővé tettem a / b-vel (1350 / 30-al). A "b" értéke az előző cserével 45-ről 30-ra változott, tehát így az "a" értéke 45 lesz. Ezzel végrehajtottuk a második cserét is.
            A végeredmény pedig : Csere előtt a számok : a = 30, b = 45.
            				      Csere után a számok :  a = 45, b = 30.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="Turing/labdapatt.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/labdapatt.c</filename>
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/labdapatt_if.c</filename>
            </link>,  
        </para>

<programlisting language="c"><![CDATA[Pattogó labda program if-fel:
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );

        mvprintw ( y, x, "(^o^)" );

        refresh ();
        usleep ( 100000 );

        //clear();

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
        }
        if ( y<=0 ) { // elerte-e a tetejet?
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { // elerte-e a aljat?
            ynov = ynov * -1;
        }

    }

    return 0;
}    
]]>	</programlisting>
         
<programlisting language="c"><![CDATA[Pattogó labda program if nélkül:
#include <stdio.h>
#include <stdlib.h>
#include <curses.h>
#include <unistd.h>

int main ( void ) 
{
    WINDOW *ablak;
    ablak = initscr ();
    noecho ();
    cbreak ();
    nodelay (ablak, true);

    int xj = 0;
    int xk = 0;
    int yj = 0;
    int yk = 0;

    int mx = 79 * 2;
    int my = 20 * 2;

    for ( ;; ) {

        xj = (xj-1) % mx;
        xk = (xk + 1) % mx;

        yj = (yj - 1) % my;
        yk = (yk + 1) % my;

        clear ();

        mvprintw (0, 0,
            "-------------------------------------------------------------------------------");
        mvprintw (20, 0,
            "-------------------------------------------------------------------------------");
        mvprintw(abs ((yj + (my - yk)) / 2),
                 abs ((xj + (mx - xk)) / 2), "o");

        refresh ();
        usleep ( 50000 );

    }

    return 0;
}
}]]></programlisting> 
        <para>
            A programok fordítását a <command> gcc labdapatt_if.c -o labdapatt_if -lncurses </command>, illeteve a <command> gcc labdapatt.c -o labdapatt -lncurses </command> paranccsal végezzük.
            A program futtatását pedig a szokásos módon: <command> ./labdapatt ./labdapatt_if </command>.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link>, 
            <link xlink:href="https://youtu.be/KRZlt1ZJ3qk">https://youtu.be/KRZlt1ZJ3qk</link>, 
            <link xlink:href=""></link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/bitem.cpp">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/bitem.cpp</filename>
            </link>
        </para>
        <programlisting language="c"><![CDATA[Szóhossz bitben
        	
#include <iostream>
using namespace std;

int main ()
{
  int h = 0;
  int n = 0x01;
  do
    ++h;
  while (n <<= 1);
  cout << "A szohossz ezen a gepen: " << h << " bites\n";
}

}]]></programlisting>         
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/Hello_google.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/Hello_google.c</filename>
            </link>,
        </para>
        <programlisting language="c"><![CDATA[Hello_google Pagerank
#include <stdio.h>
#include <math.h>


void kiir (double tomb[], int db)
{
	int i;
	for(i=0; i<db; i++)
    	printf("PageRank [%d]: %lf\n", i , tomb[i]);
	}

double tavolsag (double PR[], double PRv[], int n)
{
	double osszeg = 0;
    for (int i=0; i<n; ++i){
    	osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
    }

    return sqrt(osszeg);
}

int main(void)
{
	double L[4][4] = 
{
	    {0.0,   0.0,         1.0 / 3.0,   0.0},
	    {1.0,   1.0 / 2.0,   1.0 / 3.0,   1.0},
	    {0.0,   1.0 / 2.0,   0.0,         0.0},
	    {0.0,   0.0,         1.0 /3.0,    0.0}
};

	double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
	double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0};

int i, j;

for(;;){
	for(i = 0; i < 4; ++i)
    {
    	PR[i] = 0.0;
    	for (j = 0; j < 4; ++j)
    {
    	PR[i] += (L[i][j] * PRv[j]);
    }
}
    if (tavolsag (PR, PRv, 4) < 0.0000000001)
    	break;
    for(i = 0; i < 4; ++i)
    	PRv[i] = PR[i];

  }

kiir (PR, 4);

return 0;
}

}]]></programlisting>        
        <para>
            A program fordítása a <command> gcc hello_google.c -o hello_google -lm </command> paranccsal lehetséges.
            Futtatása pedig a <command> ./hello_google </command> paranccsal.
        </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/Montyhall.r">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/Montyhall.r</filename>
            </link>
        </para>
        <programlisting language="R"><![CDATA[
        	
kiserletek_szama = 10000
nyeremeny = sample(1:3, kiserletek_szama, replace = T)
jatekos = sample(1:3, kiserletek_szama, replace = T) 
musorvezeto = vector(length = kiserletek_szama)


#ESET 1-------------------------------------------------------------------------------------------------------
#Nem változtatunk a választásunkon
for (i in 1:kiserletek_szama)
{
    if (nyeremeny[i] == jatekos[i])
    {
        
        mibol = setdiff(c(1, 2, 3), nyeremeny[i])

    } else 
    {
        mibol = setdiff(c(1, 2, 3), c(nyeremeny[i], jatekos[i]))

    }

    musorvezeto[i] = mibol[sample(1:length(mibol), 1)]
}

nemvaltoztatesnyer = which(nyeremeny == jatekos)


#ESET 2------------------------------------------------------------------------------------------------------
#Változtatunk a választásunkon

jatekos_uj = vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama)
{
    holvalt = setdiff(c(1, 2, 3), c(musorvezeto[i], jatekos[i])) 


    jatekos_uj[i] = holvalt
}

valtoztatesnyer = which(nyeremeny == jatekos_uj)
print("Kisérletek szma:", quote = FALSE)
print(kiserletek_szama)
print("Hányszor nyernek változtatás nélkül:", quote = FALSE)
print(length(nemvaltoztatesnyer))
print("Hányszor nyerünk változtatással:", quote = FALSE)
print(length(valtoztatesnyer))
print("Nemváltoztat / Változtat:", quote = FALSE)
print(length(nemvaltoztatesnyer) / length(valtoztatesnyer))
print("Nemváltoztat + Változtat:", quote = FALSE)
print(length(nemvaltoztatesnyer) + length(valtoztatesnyer))

}]]></programlisting>        
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>

        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>    
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy            
        </para>    
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>    
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>    
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>        
        <para>
            Soronként értelemezzük ezt a programot:
        </para>                
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>        
        <para>
            Kiszámolja a megadott számig a prímeket.             
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
                
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>        
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>        
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>        
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>              
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>  
        <para>
            Kivette a primes-ból a párok első tagját. 
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>        
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>        
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>                      
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>                      
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>                      
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>    
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>            
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>          
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>                             
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4">https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

    <section xml:id="bhax-textbook-feladatok-turing.MALMÖ">
        <title>Vörös Pipacs Pokol/csiga folytonos mozgási parancsokkal</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Turing/csiga.py">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Turing/csiga.py</filename>
            </link>  
        </para>
        <programlisting language="c"><![CDATA[Csiga mozgás
    def run(self):
        world_state = self.agent_host.getWorldState()

        uthossz = 2

        # Loop until mission ends:
        while world_state.is_mission_running:
            self.agent_host.sendCommand("move 1")
            time.sleep(uthossz)
            self.agent_host.sendCommand("jump 1")
            time.sleep(0.2)
            self.agent_host.sendCommand("jump 0")
            time.sleep(0.1)
            self.agent_host.sendCommand("turn 1")
            time.sleep(0.5)
            self.agent_host.sendCommand("turn 0")
            time.sleep(0.1)

            uthossz = uthossz + 1
            
            world_state = self.agent_host.getWorldState()


}]]></programlisting> 
        <para>
            A teljes fájlból azt a lényeges részt csippentettem ki, ami a csiga mozgáshoz szükséges. Én ezt úgy oldottam meg, hogy az előre mozgáshoz szükséges parancs futási idejének (vagyis a self.agent_host.sendCommand("move 1") time.sleep(adott idő)) egy uthossz nevezetű változót deklaráltam és az értéket egyenlővé tettem 2-vel. A while ciklus végén látható, hogy "uthossz = uthossz + 1", vagyis minden egyes alkalommal, amikor a while ciklus lefut, az uthossz értéke nő 1-el. Ez teszi lehetővé, hogy minden egyes fordulás után Steve, egyre több utat tehessen meg, így előidézve a csigamozgást.
        </para>
    </section> 

</chapter>                

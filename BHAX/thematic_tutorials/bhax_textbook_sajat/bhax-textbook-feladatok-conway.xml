<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Conway/Hangyaszim/">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Conway/Hangyaszim/</filename>
            </link>,           
        </para>
        <para>
            Az alábbi programunk három darab header fájlból áll, és 3 "főfájlból".
        </para>            
        <para>
        	A Hangyaszim mappába belépve és onnan egy terminál segítségével, először ki kell adnunk a <command> qmake </command> parancsot. Ez elkészíti nekünk a Makefile-t. Ezután kiadjuk a <command> make </command> parancsot, ami lebuildeli nekünk a programot. 
        </para>
        <para>
        	Majd végül a <command> ./myrmecologist </command> parancs kiadásával futtatjuk a programunkat és láthatjuk a "hangyaszimulációt".
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./Conway/Hangyaszim/hangya1.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
             Megoldás forrása: <link xlink:href="Conway/Sejtautomata.java">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Conways/Sejtautomata.java</filename>
            </link>,                          
        </para>
        <para>
            A programot a <command> javac Sejtautomata.java </command> paranccsal fordítjuk.
        </para>       
        <para>
            Majd futtatni a <command> java Sejautomata </command> paranccsal tudjuk.
        </para>
        <blockquote><attribution>Wikipedia</attribution>
        <para>
            A legismertebb sejtautomaták egyike a John Conway által kifejlesztett életjáték. Ennek a sejtmozaik háttere olyan, mint a kockás füzet: ebben a szerkezetben minden sejtnek nyolc sejtszomszédja van. Az egyes sejtek kétféle állapotban lehetnek: élő vagy halott állapotban. Az idő, ahogy minden egyszerűbb sejtautomatában, diszkrét időegységekben múlik. Időlépésenként változtathatják állapotukat a sejtek a következő szabályok szerint:

            Egy olyan sejt helyére, amely halott, de három élő sejtszomszédja van, élő sejt „születik”.
            Egy olyan sejt, amely élő volt, és két vagy három szomszédja is élő volt, az ilyen sejt életben marad.
            Az összes többi, másmilyen környezetű sejt halott lesz a következő lépésben.
            Az életjáték sok érdekes szerkezet mozgását, gyarapodását, vagy elmúlását és sajátos alakzatok tartós fönnmaradását tudja szimulálni.
        </para>
        </blockquote>
<mediaobject>
            <imageobject>
                <imagedata fileref="./Conway/sejtautomata1.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
           Megoldás forrása: <link xlink:href="Conway/Sejtauto/">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Conway/Sejtauto/</filename>
            </link>,                        
        </para>
        <blockquote><attribution>Wikipedia</attribution>
        <para>
            Az életjátékot (angolul: The game of life) John Horton Conway, a Cambridge-i Egyetem matematikusa találta ki. Játékként való megnevezése megtévesztő lehet, mivel „nullszemélyes” játék; és a „játékos” szerepe mindössze annyi, hogy megad egy kezdőalakzatot, és azután csak figyeli az eredményt. Matematikai szempontból az ún. sejtautomaták közé tartozik. A játék egyes lépéseinek eredményét számítógép számítja ki (ez elvileg nem szükséges, korlátozottabb mértékben lehet emberi erővel és négyzethálós táblán is játszani, de ehhez türelem szükséges). A „játék”, a felfedezése utáni években, sokak hóbortos szabadidőtöltésévé vált Amerikában, s mint kiderült, komoly matematikai és filozófiai vonatkozásai vannak..
        </para>
        </blockquote>
        <para>
            A program "elkészítését" a <command> qmake </command> parancs segítségével hajtjuk végre.
        </para>   
        <para>
            Először is a könyvtárban, ahol a két header fájl és a két .cpp fájl található, kiadunk egy <command> qmake-qt4 -project </command> parancsot. Ez létrehoz nekünk a mappa neve alapján egy .pro fájlt. Ezután a <command> qmake </command> parancsot ráküldjük erre a Valami.pro fájlra. Ezzel elkészül a Makefile-unk. Ezt követően a <command> make </command> paranccsal elkészítjük a futtatható programunkat. 
        </para>         
        <para>
            Végül a <command> ./Sejtauto </command> paranccsal futtatjuk a programot.
        </para>
        <mediaobject>
            <imageobject>
                <imagedata fileref="./Conway/Sejtauto/sejtauto_c++.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Conway/Brainb/">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Conway/BrainB/</filename>
            </link>,             
        </para>
        <para>
            BrainB Benchmark szoftver, összeállít egy elméleti profilt, hogy az adott játékos hogyan teljesít abban a szituációbanamikor "elveszti" a karakterét egy egy intenzívebb pillanatban, pld vizuállis efektek ki takarják egymást, nagy a kavarodás stb stb. A feladatun a szimuláció alatt, hogy az egér kurzort a ’Samu Entropy’ karakteren tartsuk, pontosabban a doboz közepébrn lévő körön.
        </para>   
        <para>
            Kezdjünk is neki az előkészületeknek:
        </para>
        <screen><![CDATA[2000  git clone https://github.com/nbatfai/esport-talent-search
 2001  cd esport-talent-search
 2002  sudo apt-get install opencv-data
 2003  sudo apt-get install libopencv-dev
 2004  mkdir build && cd build
 2005  qmake ..
 2006  make
 2007  ./BrainB 

]]></screen>    
    <para>
        És akkor teszteljük magunkat!
    </para>
<mediaobject>
            <imageobject>
                <imagedata fileref="./Conway/BrainB/brain.png" format="PNG" />
            </imageobject>
        </mediaobject>
    </section> 
<section>
        <title>Vörös Pipacs Pokol/19 RF</title>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=UbiBkkLx1Fk">https://www.youtube.com/watch?v=UbiBkkLx1Fk</link>    
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Conway/Red_flower_mining5.py">
                <filename>bhax/thematic_tutorials/bhax_textbook_sajat/Conway/Red_flower_mining5.py</filename>
            </link>,                   
        </para>
        <para>
            Ebben a megoldásban a saját RFH-3as döntőbejutó kódunkat mutatnám be:
        </para>
<para>A mi ágensünk 38 pipacsot szedett össze a legutóbbi fejlesztés alapján. Ennek működését írnám le tömören. Előszöris a játék meghívásakor meghívódik a run() függvény. Ez addig fut, amíg a mission véget nem ér. Innen hívódik meg az action() függvény, ami folyamatosan lekéri az Observation From Gridet. A körülvevő objektumok alapján eldöntjük mit csináljon, minden blokkot figyelemmel kísérünk, és ahol pipacs van, felszedi(még ha egy szinttel lejjebb van, és a 3x3x3-as látómezőbe szerepel) majd visszalép a helyére és folyamatosan halad előre, illetve sarkot fordul, amíg nem talál pipacsot. Ha talált, lejjebb megy egy szinttel.
</para>  
<programlisting language="python"><![CDATA[
from __future__ import print_function
# ------------------------------------------------------------------------------------------------
# Copyright (c) 2016 Microsoft Corporation
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# ------------------------------------------------------------------------------------------------

# Tutorial sample #2: Run simple mission using raw XML

# Added modifications by Norbert Bátfai (nb4tf4i) batfai.norbert@inf.unideb.hu, mine.ly/nb4tf4i.1
# 2018.10.18, https://bhaxor.blog.hu/2018/10/18/malmo_minecraft
# 2020.02.02, NB4tf4i's Red Flowers, http://smartcity.inf.unideb.hu/~norbi/NB4tf4iRedFlowerHell
# 2020.03.02, https://github.com/nbatfai/RedFlowerHell
# 2020.03.07, "_smartSteve": nof_turn (number of turns) is replaced by the dict self.collectedFlowers 
# 2020.03.11, "_bu": bottom up, s4v3: https://youtu.be/VP0kfvRYD1Y

from builtins import range
import MalmoPython
import os
import sys
import time
import random
import json
import math

if sys.version_info[0] == 2:
    sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)  # flush print output immediately
else:
    import functools
    print = functools.partial(print, flush=True)

# Create default Malmo objects:

agent_host = MalmoPython.AgentHost()
try:
    agent_host.parse( sys.argv )
except RuntimeError as e:
    print('ERROR:',e)
    print(agent_host.getUsage())
    exit(1)
if agent_host.receivedArgument("help"):
    print(agent_host.getUsage())
    exit(0)

# -- set up the mission -- #
missionXML_file='nb4tf4i_d_RFHIII.xml'
with open(missionXML_file, 'r') as f:
    print("NB4tf4i's Red Flowers (Red Flower Hell) - DEAC-Hackers Battle Royale Arena\n")
    print("NB4tf4i vörös pipacsai (Vörös Pipacs Pokol) - DEAC-Hackers Battle Royale Arena\n")
    print("The aim of this first challenge, called nb4tf4i's red flowers, is to collect as many red flowers as possible before the lava flows down the hillside.\n")
    print("Ennek az első, az nb4tf4i vörös virágai nevű kihívásnak a célja összegyűjteni annyi piros virágot, amennyit csak lehet, mielőtt a láva lefolyik a hegyoldalon.\n")    
    print("Norbert Bátfai, batfai.norbert@inf.unideb.hu, https://arato.inf.unideb.hu/batfai.norbert/\n")
    print("Loading mission from %s" % missionXML_file)
    mission_xml = f.read()
    my_mission = MalmoPython.MissionSpec(mission_xml, True)
    my_mission.drawBlock( 0, 0, 0, "lava")

class Hourglass:
    def __init__(self, charSet):
        self.charSet = charSet
        self.index = 0
    def cursor(self):
        self.index=(self.index+1)%len(self.charSet)
        return self.charSet[self.index]

hg = Hourglass('|/-\|')

class Steve:
    def __init__(self, agent_host):
        self.agent_host = agent_host

        for i in range(81):
            self.agent_host.sendCommand("jumpmove 1")

        self.agent_host.sendCommand("look 1")       
        self.agent_host.sendCommand("look 1")
            
        self.x = 0
        self.y = 0
        self.z = 0
        self.yaw = 0
        self.pitch = 0
        
        self.front_of_me_idx = 0
        self.front_of_me_idxr = 0
        self.front_of_me_idxl = 0        
        self.right_of_me_idx = 0
        self.left_of_me_idx = 0        
        
        self.nof_red_flower = 0
        self.lookingat = ""
        self.attackLvl = 0
        self.trap = 0
        
        self.collectedFlowers = {}
        for i in range(100):
            self.collectedFlowers[i] = False

        self.collectedFlowers[1] = True
        self.collectedFlowers[2] = True

    def checkInventory(self, observations):
        for i in range(2):
            hotbari = 'Hotbar_'+str(i)+'_item'
            hotbars = 'Hotbar_'+str(i)+'_size'
            slot0_contents = observations.get(hotbari, "")
            if slot0_contents == "red_flower":
                slot0_size = observations.get(hotbars, "")
                if self.nof_red_flower < slot0_size :
                    self.nof_red_flower = slot0_size                                            
                    #print("            A RED FLOWER IS MINED AND PICKED UP")
                    #print("            Steve's lvl: ", self.y, "Flower lvl: ", self.attackLvl) 
                    self.collectedFlowers[self.attackLvl] = True
                    if self.lvlUp(observations.get("nbr3x3", 0)):
                        return True
    def pickUp(self):
        print(" Felvesz")
        self.agent_host.sendCommand( "attack 1" )
        time.sleep(.1)
        self.agent_host.sendCommand( "move 0")
        time.sleep(.5)  
        self.agent_host.sendCommand("strafe -1")
        time.sleep(.1)

        self.attackLvl = self.y
        self.trap = 0

    def lvlUp(self, nbr):
        if self.collectedFlowers[self.y]:
            self.lvlDown(nbr)
            return True
        else:
            return False

    def idle(self, delay):
        #print("      SLEEPING for ", delay)
        time.sleep(delay)
                                                        
    def isInTrap(self, nbr):
            
        dc = 0    
        nbri = [9,10,11,12,14,15,16,17]    
        for i in range(1, len(nbri)):
            if nbr[nbri[i]]=="dirt" :
                dc = dc + 1            
        return dc > 5

    def turnFromWall(self, nbr):
        if (nbr[self.left_of_me_idx+9]=="air") and (nbr[self.front_of_me_idx]=="dirt"):
            print(" Fordulás")
            self.agent_host.sendCommand( "turn -1" )
            time.sleep(.1)
            self.agent_host.sendCommand("strafe -1")
            time.sleep(.1)
        self.trap = self.trap+1

    def lvlDown(self, nbr):
        if (nbr[self.left_of_me_idx+9]=="air" or (nbr[self.right_of_me_idx]=="dirt")):
            self.movement2()

    def movement2(self):
        self.agent_host.sendCommand( "move 1")
        time.sleep(0.01)
        self.agent_host.sendCommand( "strafe -1" )
        time.sleep(.1)  

    def calcNbrIndex(self):
        if self.yaw >= 180-22.5 and self.yaw <= 180+22.5 :
            self.front_of_me_idx = 1
            self.front_of_me_idxr = 2
            self.front_of_me_idxl = 0
            self.right_of_me_idx = 5
            self.left_of_me_idx = 3            
        elif self.yaw >= 180+22.5 and self.yaw <= 270-22.5 :
            self.front_of_me_idx = 2 
            self.front_of_me_idxr = 5
            self.front_of_me_idxl =1             
            self.right_of_me_idx = 8
            self.left_of_me_idx = 0            
        elif self.yaw >= 270-22.5 and self.yaw <= 270+22.5 :
            self.front_of_me_idx = 5
            self.front_of_me_idxr = 8
            self.front_of_me_idxl = 2
            self.right_of_me_idx = 7
            self.left_of_me_idx = 1                        
        elif self.yaw >= 270+22.5 and self.yaw <= 360-22.5 :
            self.front_of_me_idx = 8            
            self.front_of_me_idxr = 7
            self.front_of_me_idxl = 5          
            self.right_of_me_idx = 6
            self.left_of_me_idx = 2                        
        elif self.yaw >= 360-22.5 or self.yaw <= 0+22.5 :
            self.front_of_me_idx = 7
            self.front_of_me_idxr = 6
            self.front_of_me_idxl = 8
            self.right_of_me_idx = 3
            self.left_of_me_idx = 5                        
        elif self.yaw >= 0+22.5 and self.yaw <= 90-22.5 :
            self.front_of_me_idx = 6
            self.front_of_me_idxr = 3
            self.front_of_me_idxl = 7          
            self.right_of_me_idx = 0
            self.left_of_me_idx = 8                        
        elif self.yaw >= 90-22.5 and self.yaw <= 90+22.5 :
            self.front_of_me_idx = 3
            self.front_of_me_idxr = 0
            self.front_of_me_idxl = 6
            self.right_of_me_idx = 1
            self.left_of_me_idx = 7                        
        elif self.yaw >= 90+22.5 and self.yaw <= 180-22.5 :
            self.front_of_me_idx = 0
            self.front_of_me_idxr = 1
            self.front_of_me_idxl = 3
            self.right_of_me_idx = 2
            self.left_of_me_idx = 6                        
        else:
            print("There is great disturbance in the Force...")            

    def whatISee(self, observations):
        self.lookingat = "NOTHING"            
        if "LineOfSight" in observations:
            lineOfSight = observations["LineOfSight"] 
            self.lookingat = lineOfSight["type"]      

    def whatMyPos(self, observations):
        if "Yaw" in observations:
            self.yaw = int(observations["Yaw"])
        if "Pitch" in observations:
            self.pitch = int(observations["Pitch"])
        if "XPos" in observations:
            self.x = int(observations["XPos"])
        if "ZPos" in observations:
            self.z = int(observations["ZPos"])        
        if "YPos" in observations:
            self.y = int(observations["YPos"])        
            
    def run(self):
        world_state = self.agent_host.getWorldState()
        # Loop until mission ends:
        while world_state.is_mission_running:
            
            act = self.action(world_state)
            if not act:
                self.idle(.017)
            world_state = self.agent_host.getWorldState()

    def action(self, world_state):
        for error in world_state.errors:
            print("Error:", error.text)
        
        if world_state.number_of_observations_since_last_state == 0:
            #print("    NO OBSERVATIONS NO ACTIONS")
            return False
        
        input = world_state.observations[-1].text
        observations = json.loads(input)
        nbr = observations.get("nbr3x3", 0)
        #print(observations)
        
        self.whatMyPos(observations)
        #print("\r    Steve's Coords: ", self.x, self.y, self.z, end='')        
        #print("    Steve's Yaw: ", self.yaw)        
        #print("    Steve's Pitch: ", self.pitch)        

        self.checkInventory(observations)
        #print("Number of flowers: ", self.nof_red_flower)

        self.whatISee(observations)
        #print("    Steve's <): ", self.lookingat)
                        
        self.calcNbrIndex()   
                        
        if self.isInTrap(nbr) :
            print(" Ugrás")
            self.agent_host.sendCommand( "jumpstrafe -1" )
            time.sleep(.2)
            return True

        if self.trap > 5:
            print(" Ezen a szinten már nincs pipacs")
            self.lvlDown(nbr)
            self.agent_host.sendCommand("strafe -1")
            time.sleep(.1)
            self.trap = 0

        
        for i in range(9):
            if nbr[i]=="red_flower" or nbr[i+9]=="red_flower":
                print(" Az ott egy pipacs?: ", i, " LEVEL ", self.y - 1)
                if i == self.front_of_me_idxl :
                    print(" Balra lép ")
                    self.agent_host.sendCommand("move -1")
                    time.sleep(.1)              
                    self.agent_host.sendCommand( "strafe -1" )
                    time.sleep(.1)
                    self.pickUp()
                    return True
                elif i == self.left_of_me_idx :
                    print(" Balra lép")
                    self.agent_host.sendCommand("move -1")
                    time.sleep(.1)
                    self.agent_host.sendCommand("move -1")
                    time.sleep(.1)
                    self.agent_host.sendCommand( "strafe -1" )
                    time.sleep(.1)
                    self.pickUp()
                    return True
                elif i == 4  :
                    self.red_flower_is_mining = True
                    self.pickUp()
                    return True


        if nbr[self.front_of_me_idx+9]!="air" and nbr[self.front_of_me_idx+9]!="red_flower":
            #print("        THERE ARE OBSTACLES IN FRONT OF ME ",  nbr[self.front_of_me_idx], end='')
  
            self.turnFromWall(nbr)
                        
        else:
            #print("        THERE IS NO OBSTACLE IN FRONT OF ME", end='')
            
            if nbr[self.front_of_me_idx]=="dirt":
                self.agent_host.sendCommand( "move 1" )
                time.sleep(0.013)
                self.agent_host.sendCommand( "move 1" )
                time.sleep(0.013)  

                
        return True        

num_repeats = 1
for ii in range(num_repeats):

    my_mission_record = MalmoPython.MissionRecordSpec()

    # Attempt to start a mission:
    max_retries = 6
    for retry in range(max_retries):
        try:
            agent_host.startMission( my_mission, my_mission_record )
            break
        except RuntimeError as e:
            if retry == max_retries - 1:
                print("Error starting mission:", e)
                exit(1)
            else:
                print("Attempting to start the mission:")
                time.sleep(2)

    # Loop until mission starts:
    print("   Waiting for the mission to start")
    world_state = agent_host.getWorldState()

    while not world_state.has_mission_begun:
        print("\r"+hg.cursor(), end="")
        time.sleep(0.15)
        world_state = agent_host.getWorldState()
        for error in world_state.errors:
            print("Error:",error.text)

    print("NB4tf4i Red Flower Hell running\n")
    steve = Steve(agent_host)
    steve.run()
    print("Number of flowers: "+ str(steve.nof_red_flower))
    time.sleep(3)

print("Mission ended")
# Mission has ended.
]]></programlisting>
    </section>            

</chapter>                


 